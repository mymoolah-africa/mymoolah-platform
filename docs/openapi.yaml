openapi: 3.0.3
info:
  title: MyMoolah API
  version: 1.0.0
  description: |
    RESTful API for the MyMoolah banking and wallet platform.
servers:
  - url: https://api.mymoolah.com

tags:
  - name: Wallets
    description: Wallet management and transactions
  - name: Users
    description: User registration, login, and roles
  - name: Vouchers
    description: Voucher issuing, redeeming, and listing
  - name: KYC
    description: Know Your Customer (KYC) operations
  - name: Notifications
    description: User notifications
  - name: Support
    description: Support ticketing

paths:
  /api/wallets:
    post:
      tags: [Wallets]
      summary: Create a new wallet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletCreateRequest'
            example:
              user_id: 123
              account_number: "100200300"
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
              example:
                id: 1
                user_id: 123
                account_number: "100200300"
                balance: 0.0
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid input data"

  /api/wallets/{id}:
    get:
      tags: [Wallets]
      summary: Get wallet details by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Wallet ID
      responses:
        '200':
          description: Wallet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
              example:
                id: 1
                user_id: 123
                account_number: "100200300"
                balance: 100.0
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Wallet not found"

  /api/wallets/{id}/balance:
    get:
      tags: [Wallets]
      summary: Get wallet balance by ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Wallet ID
      responses:
        '200':
          description: Wallet balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float
                    description: The current wallet balance
              example:
                balance: 100.0
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Wallet not found"

  /api/wallets/{id}/credit:
    post:
      tags: [Wallets]
      summary: Credit wallet
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Wallet ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransactionRequest'
            example:
              amount: 50.0
              description: "Salary deposit"
      responses:
        '200':
          description: Wallet credited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
              example:
                id: 1
                user_id: 123
                account_number: "100200300"
                balance: 150.0
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid input"
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Wallet not found"

  /api/wallets/{id}/debit:
    post:
      tags: [Wallets]
      summary: Debit wallet
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Wallet ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletTransactionRequest'
            example:
              amount: 20.0
              description: "ATM withdrawal"
      responses:
        '200':
          description: Wallet debited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
              example:
                id: 1
                user_id: 123
                account_number: "100200300"
                balance: 80.0
        '400':
          description: Invalid input or insufficient funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Insufficient funds"
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Wallet not found"

  /api/wallets/{id}/transactions:
    get:
      tags: [Wallets]
      summary: List wallet transactions
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Wallet ID
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
              example:
                - id: 1
                  wallet_id: 1
                  amount: 50.0
                  type: credit
                  description: "Salary deposit"
                  created_at: "2024-07-01T10:00:00Z"
                - id: 2
                  wallet_id: 1
                  amount: 20.0
                  type: debit
                  description: "ATM withdrawal"
                  created_at: "2024-07-02T12:00:00Z"
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Wallet not found"

  # --- Users ---
  /api/users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
            example:
              username: johndoe
              password: "password123"
              email: johndoe@example.com
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                username: johndoe
                email: johndoe@example.com
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid input data"

  /api/users/login:
    post:
      tags: [Users]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            example:
              username: johndoe
              password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid username or password"

  # --- Vouchers ---
  /api/vouchers/issue:
    post:
      tags: [Vouchers]
      summary: Issue a new voucher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoucherIssueRequest'
            example:
              user_id: 123
              amount: 100.0
              description: "Gift voucher"
      responses:
        '201':
          description: Voucher issued successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
              example:
                id: 1
                code: "ABC123"
                user_id: 123
                amount: 100.0
                status: "active"
                description: "Gift voucher"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid input data"

  /api/vouchers/redeem:
    post:
      tags: [Vouchers]
      summary: Redeem a voucher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoucherRedeemRequest'
            example:
              code: "ABC123"
              user_id: 123
      responses:
        '200':
          description: Voucher redeemed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Voucher'
              example:
                id: 1
                code: "ABC123"
                user_id: 123
                amount: 100.0
                status: "redeemed"
                description: "Gift voucher"
        '400':
          description: Invalid input or voucher not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Voucher not found or already redeemed"

  /api/vouchers/user/{userId}:
    get:
      tags: [Vouchers]
      summary: List active vouchers for a user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: User ID
      responses:
        '200':
          description: List of active vouchers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Voucher'
              example:
                - id: 1
                  code: "ABC123"
                  user_id: 123
                  amount: 100.0
                  status: "active"
                  description: "Gift voucher"
        '404':
          description: No vouchers found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "No vouchers found"

  # --- KYC ---
  /api/kyc/submit:
    post:
      tags: [KYC]
      summary: Submit KYC documents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KYCSubmitRequest'
            example:
              user_id: 123
              document_type: "ID"
              document_url: "https://example.com/id.jpg"
      responses:
        '200':
          description: KYC submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCStatus'
              example:
                user_id: 123
                status: "pending"
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid input data"

  # --- Notifications ---
  /api/notifications:
    get:
      tags: [Notifications]
      summary: List notifications for the authenticated user
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
              example:
                - id: 1
                  user_id: 123
                  message: "Welcome to MyMoolah!"
                  read: false
                  created_at: "2024-07-01T10:00:00Z"

  # --- Support ---
  /api/support/ticket:
    post:
      tags: [Support]
      summary: Create a new support ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketRequest'
            example:
              user_id: 123
              subject: "Unable to access wallet"
              message: "I can't see my wallet balance."
      responses:
        '201':
          description: Support ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportTicket'
              example:
                id: 1
                user_id: 123
                subject: "Unable to access wallet"
                message: "I can't see my wallet balance."
                status: "open"
                created_at: "2024-07-01T10:00:00Z"

components:
  schemas:
    Wallet:
      type: object
      description: A user's wallet
      properties:
        id:
          type: integer
          description: Unique wallet ID
        user_id:
          type: integer
          description: ID of the wallet owner
        account_number:
          type: string
          description: Wallet account number
        balance:
          type: number
          format: float
          description: Current wallet balance

    WalletCreateRequest:
      type: object
      required:
        - user_id
        - account_number
      properties:
        user_id:
          type: integer
          description: ID of the wallet owner
        account_number:
          type: string
          description: Wallet account number

    WalletTransactionRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: number
          format: float
          description: Amount to credit or debit
        description:
          type: string
          description: Description of the transaction

    Transaction:
      type: object
      description: A wallet transaction
      properties:
        id:
          type: integer
          description: Transaction ID
        wallet_id:
          type: integer
          description: Wallet ID
        amount:
          type: number
          format: float
          description: Transaction amount
        type:
          type: string
          enum: [credit, debit]
          description: Transaction type
        description:
          type: string
          description: Transaction description
        created_at:
          type: string
          format: date-time
          description: Transaction timestamp

    User:
      type: object
      description: A user account
      properties:
        id:
          type: integer
          description: User ID
        username:
          type: string
          description: Username
        email:
          type: string
          description: User email address

    UserRegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          description: Desired username
        password:
          type: string
          description: User password
        email:
          type: string
          description: User email address

    UserLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: User password

    Voucher:
      type: object
      description: A voucher
      properties:
        id:
          type: integer
          description: Voucher ID
        code:
          type: string
          description: Voucher code
        user_id:
          type: integer
          description: User ID associated with the voucher
        amount:
          type: number
          format: float
          description: Voucher amount
        status:
          type: string
          description: Voucher status (active, redeemed, etc.)
        description:
          type: string
          description: Voucher description

    VoucherIssueRequest:
      type: object
      required:
        - user_id
        - amount
      properties:
        user_id:
          type: integer
          description: User ID to issue the voucher to
        amount:
          type: number
          format: float
          description: Voucher amount
        description:
          type: string
          description: Voucher description

    VoucherRedeemRequest:
      type: object
      required:
        - code
        - user_id
      properties:
        code:
          type: string
          description: Voucher code to redeem
        user_id:
          type: integer
          description: User ID redeeming the voucher

    KYCSubmitRequest:
      type: object
      required:
        - user_id
        - document_type
        - document_url
      properties:
        user_id:
          type: integer
          description: User ID
        document_type:
          type: string
          description: Type of document (ID, passport, etc.)
        document_url:
          type: string
          description: URL to the uploaded document

    KYCStatus:
      type: object
      description: KYC status for a user
      properties:
        user_id:
          type: integer
          description: User ID
        status:
          type: string
          description: KYC status (pending, approved, rejected)

    Notification:
      type: object
      description: A user notification
      properties:
        id:
          type: integer
          description: Notification ID
        user_id:
          type: integer
          description: User ID
        message:
          type: string
          description: Notification message
        read:
          type: boolean
          description: Whether the notification has been read
        created_at:
          type: string
          format: date-time
          description: Notification timestamp

    SupportTicketRequest:
      type: object
      required:
        - user_id
        - subject
        - message
      properties:
        user_id:
          type: integer
          description: User ID
        subject:
          type: string
          description: Ticket subject
        message:
          type: string
          description: Ticket message

    SupportTicket:
      type: object
      description: A support ticket
      properties:
        id:
          type: integer
          description: Ticket ID
        user_id:
          type: integer
          description: User ID
        subject:
          type: string
          description: Ticket subject
        message:
          type: string
          description: Ticket message
        status:
          type: string
          description: Ticket status (open, closed, etc.)
        created_at:
          type: string
          format: date-time
          description: Ticket creation timestamp

    Error:
      type: object
      description: Error response
      properties:
        message:
          type: string
          description: Error message