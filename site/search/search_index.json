{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MyMoolah Documentation","text":""},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"PROJECT_ONBOARDING/","title":"MyMoolah Project Onboarding Guide","text":"<p>Welcome to the MyMoolah platform! This guide will help you get started as a developer or contributor.</p>"},{"location":"PROJECT_ONBOARDING/#project-overview","title":"Project Overview","text":"<p>MyMoolah is a Mojaloop-inspired, modular banking and wallet platform for Africa, built with Node.js/Express and MySQL. The project is API-driven, cloud-native, and designed for security, compliance, and extensibility.</p>"},{"location":"PROJECT_ONBOARDING/#getting-started","title":"Getting Started","text":""},{"location":"PROJECT_ONBOARDING/#1-codespaces-setup-recommended","title":"1. Codespaces Setup (Recommended)","text":"<ul> <li>Use GitHub Codespaces for a consistent, cloud-based development environment.</li> <li>Open the repository in Codespaces from GitHub.</li> <li>All dependencies and environment setup are managed in Codespaces.</li> </ul>"},{"location":"PROJECT_ONBOARDING/#2-local-development-optional","title":"2. Local Development (Optional)","text":"<ul> <li>Clone the repository:   <code>bash   git clone &lt;your-repo-url&gt;   cd mymoolah</code></li> <li>Install dependencies:   <code>bash   npm install</code></li> <li>Create a <code>.env</code> file in the root directory:   <code>env   DB_HOST=your-mysql-host   DB_USER=your-mysql-user   DB_PASSWORD=your-mysql-password   DB_NAME=your-mysql-db   PORT=5050</code></li> <li>Start the server:   <code>bash   npm start</code></li> </ul>"},{"location":"PROJECT_ONBOARDING/#key-files-folders","title":"Key Files &amp; Folders","text":"<ul> <li><code>server.js</code> \u2013 Main Express app entry point</li> <li><code>config/db.js</code> \u2013 MySQL connection pool setup</li> <li><code>routes/</code> \u2013 API route definitions</li> <li><code>controllers/</code> \u2013 Business logic for each resource</li> <li><code>models/</code> \u2013 Database models and schema logic</li> <li><code>docs/</code> \u2013 Project documentation (requirements, onboarding, session notes)</li> <li><code>.env</code> \u2013 Environment variables (never commit this file)</li> <li><code>package.json</code> \u2013 Project dependencies and scripts</li> </ul>"},{"location":"PROJECT_ONBOARDING/#git-workflow","title":"Git &amp; Workflow","text":"<ul> <li>Always work in Codespaces unless you have a specific reason to work locally.</li> <li>Before starting work: <code>bash   git pull origin main</code></li> <li>After making changes and testing: <code>bash   git add .   git commit -m \"Describe your change\"   git push origin &lt;your-branch&gt;</code></li> <li>Use backup branches before major changes.</li> <li>Keep documentation up to date after each session or major change.</li> </ul>"},{"location":"PROJECT_ONBOARDING/#documentation","title":"Documentation","text":"<ul> <li>Main docs: <code>README.md</code>, <code>docs/requirements.md</code>, <code>docs/session-summary.md</code>, <code>docs/PROJECT_ONBOARDING.md</code></li> <li>API reference: <code>openapi.yaml</code> and published docs at https://mymoolah-africa.github.io/mymoolah-platform/</li> <li>Session logs: <code>docs/session-summary.md</code></li> <li>Handover: <code>AGENT_HANDOVER.md</code></li> </ul>"},{"location":"PROJECT_ONBOARDING/#support","title":"Support","text":"<ul> <li>For questions, see the <code>docs/</code> folder or contact the project maintainer.</li> </ul> <p>Welcome to the team! Please read all referenced docs for full context.</p>"},{"location":"PROJECT_ONBOARDING/#implemented-endpoints-as-of-june-2025","title":"Implemented Endpoints (as of June 2025)","text":"<ul> <li>Wallets: Create, get details, get balance, credit, debit, list transactions</li> <li>Vouchers: Issue, redeem, list</li> <li>KYC: Upload document, get status</li> <li>Notifications: Create, list for user, mark as read</li> <li>Support: Create ticket, list tickets for user</li> </ul>"},{"location":"SECURITY/","title":"Security","text":""},{"location":"openapi/","title":"API Reference","text":"<ul> <li>View the OpenAPI YAML</li> </ul>"},{"location":"requirements/","title":"Requirements","text":"<pre><code># MyMoolah Platform Requirements\n- All endpoints are versioned and use the `/api/v1/` prefix for consistency and future-proofing.\n\n## Project Overview\nMyMoolah is a cloud-native, Mojaloop-inspired banking and wallet platform for Africa, designed for cost efficiency, scalability, and compliance with international banking standards.\n\n---\n\n## Business &amp; Technical Goals\n\n- Serve B2B clients and enable them to manage prefunded float accounts for millions of end users.\n- Support low-income individuals in Africa with affordable, accessible digital financial services.\n- Integrate with multiple VAS and payment service providers (e.g., DT Mercury for PayShap, Mobilemart, Flash).\n- Provide a secure, auditable, and compliant platform for all transactions.\n- Modular Node.js/Express backend with MySQL (Google Cloud SQL).\n- RESTful API, documented with OpenAPI/Swagger.\n- KYC onboarding for B2B and B2C (document upload, approval workflow).\n- Voucher system for secure generation, distribution, and redemption.\n- Real-time transaction processing (1000+ TPS target).\n- Scalable, cloud-native deployment (Google Cloud, Codespaces for dev).\n- Security: PCI DSS compliance, OAuth2/JWT, encryption, audit logging.\n\n---\n\n## Account Types &amp; Requirements\n\n### Client Accounts (B2B)\n- Onboarding, KYC, compliance.\n- Float account management (ZAR, multi-currency future).\n- Automated float notifications (80/90/95%).\n- Secure client portal for reporting.\n- Each client can have millions of customers, each with an internal wallet managed by the client.\n- Compliance, security, auditability.\n\n### Service Provider Accounts\n- Modular API integration (e.g., DT Mercury for PayShap, Mobilemart, Flash).\n- Float management, notifications, KYC, compliance.\n- Transaction journey, pricing/on-selling, reporting, VAT handling, security, audit.\n\n### User Accounts (B2C)\n- KYC (SA ID or passport), document upload, proof of address.\n- Funding via EFT, PayShap, vouchers.\n- Voucher system, transaction history, reporting.\n- Mobile number as account number, unique backend ID.\n- Security, simplicity.\n\n### Internal/Operational Accounts\n- System float, fee collection, VAT holding, suspense/settlement.\n- Full transaction history, audit trail, reconciliation, segregation of funds.\n\n### Agent/Merchant/API Accounts (Future)\n- For field agents, merchants, and third-party integrations.\n- KYC, float/commission management, POS/e-commerce support.\n\n---\n\n## API &amp; Data Model\n\n- **Implemented Endpoints:**\n  - `POST /api/v1/users/register` (user registration, validation, hashing, duplicate check)\n- **Planned Endpoints:**\n  - Wallet funding, transaction history, voucher management, KYC upload, authentication, VAS integrations, notifications, support tickets.\n- **Data Model:**\n  - Robust ERD with tables for clients, users, wallets, transactions, vouchers, KYC, VAT, audit logs, notifications, support tickets.\n\n---\n\n## Backend Implementation Status (as of July 2024)\n\n- User registration API (`/api/v1/users/register`) is implemented with validation, password hashing, and MySQL integration.\n- `server.js` is configured with CORS, error handling, and user route registration.\n- Environment variables in `.env` manage database credentials securely.\n- Documentation portal is live at [https://mymoolah-africa.github.io/mymoolah-platform/](https://mymoolah-africa.github.io/mymoolah-platform/).\n- OpenAPI spec (`openapi.yaml`) is included for API reference and can be viewed in Swagger Editor or Redoc.\n- **Note:** The documentation site is static and separate from the backend API, which runs locally or in Codespaces.\n- The codebase is now fully Node.js + Express + MySQL only (all MongoDB/Mongoose code has been removed).\n- Regular backup branches and cleanup are used before major changes, following best practice for safe recovery.\n\n---\n\n## Configuration &amp; Environment Files\n\n- `.env`: Stores environment variables for database credentials and other secrets.\n- `config/db.js`: Sets up the MySQL connection pool using environment variables.\n- `server.js`: Main entry point for the backend server, configures middleware, routes, and error handling.\n- `routes/users.js`: Handles user registration and related API endpoints.\n\n---\n\n## Git Workflow: Moving Folders/Files from Local Development to GitHub\n\n**Best Practice:**\n- Always copy your new or updated files/folders into your local clone of the GitHub repo (not directly into the remote via the web interface).\n- Use git to track, commit, and push your changes. This ensures version control, collaboration, and triggers any automations (like documentation deployment).\n\n**Step-by-Step Instructions:**\n\n1. **Copy your files/folders into your local repo directory.**\n   - Example: Drag and drop, or use the `cp` command in your terminal.\n\n2. **Check the status of your repo:**\n   ```bash\n   git status\n   ```\n   - This shows new, modified, or deleted files/folders.\n\n3. **Stage your changes:**\n   - To add everything (recommended):\n     ```bash\n     git add .\n     ```\n   - To add a specific folder:\n     ```bash\n     git add path/to/your-folder\n     ```\n   - To add a specific file:\n     ```bash\n     git add path/to/your-file\n     ```\n\n4. **Commit your changes:**\n   ```bash\n   git commit -m \"Add/update files and folders from local development\"\n   ```\n\n5. **Push to GitHub:**\n   ```bash\n   git push\n   ```\n\n6. **Check your repo on GitHub** to confirm the changes are there.\n\n**Notes:**\n- Git will track all files inside folders you add, except those listed in `.gitignore`.\n- If you delete a folder locally and run `git add .`, Git will stage the deletion as well.\n- Use `git status` to review what will be added, modified, or deleted before you commit.\n\n---\n\n</code></pre>"},{"location":"requirements/#implemented-endpoints-as-of-june-2025","title":"Implemented Endpoints (as of June 2025)","text":"<ul> <li>Wallets: Create, get details, get balance, credit, debit, list transactions</li> <li>Vouchers: Issue, redeem, list</li> <li>KYC: Upload document, get status</li> <li>Notifications: Create, list for user, mark as read</li> <li>Support: Create ticket, list tickets for user</li> </ul>"},{"location":"session-summary/","title":"Session Summary","text":"<p>[2024-07-12] Cleanup &amp; Verification Session Created a backup branch (cleanup-backup) before making any changes. Removed unnecessary dependencies (e.g., mongoose) and files (.DS_Store, .viminfo, server_js.code-search, .mariadb_history). Installed and verified all required dependencies (express, mysql2, dotenv, cors). Restarted the server and confirmed all endpoints (e.g., /api/v1/clients) are working. Committed and pushed all changes to the cleanup-backup branch on GitHub. Confirmed project is MySQL-only, clean, and up to Mojaloop-aligned standards. Ready for further development, testing, or merging into main.</p>"},{"location":"session-summary/#2024-07-12-cleanup-verification-documentation-session","title":"[2024-07-12] Cleanup, Verification &amp; Documentation Session","text":"<ul> <li>Created a backup branch (<code>cleanup-backup</code>) before making any changes.</li> <li>Removed unnecessary dependencies (e.g., <code>mongoose</code>) and files (<code>.DS_Store</code>, <code>.viminfo</code>, <code>server_js.code-search</code>, <code>.mariadb_history</code>).</li> <li>Installed and verified all required dependencies (<code>express</code>, <code>mysql2</code>, <code>dotenv</code>, <code>cors</code>).</li> <li>Restarted the server and confirmed all endpoints (e.g., <code>/api/v1/clients</code>) are working.</li> <li>Committed and pushed all changes to the <code>cleanup-backup</code> branch on GitHub.</li> <li>Updated all documentation files, including onboarding and requirements.</li> <li>Ready for further development, testing, or merging into <code>main</code>.</li> </ul>"},{"location":"session-summary/#2025-06-27-major-api-expansion-testing","title":"[2025-06-27] Major API Expansion &amp; Testing","text":"<ul> <li>Implemented and tested all wallet, voucher, KYC, notifications, and support endpoints.</li> <li>Committed and pushed after every major step.</li> <li>All endpoints are working and returning correct data.</li> <li>Ready to proceed with authentication, VAS, and admin endpoints.</li> </ul>"},{"location":"session-summary/#implemented-endpoints-as-of-june-2025","title":"Implemented Endpoints (as of June 2025)","text":"<ul> <li>Wallets: Create, get details, get balance, credit, debit, list transactions</li> <li>Vouchers: Issue, redeem, list</li> <li>KYC: Upload document, get status</li> <li>Notifications: Create, list for user, mark as read</li> <li>Support: Create ticket, list tickets for user</li> </ul>"},{"location":"session_decision_notes/","title":"Session Decision Notes","text":"<p>This file is a running log of key decisions, design choices, and important context made during development sessions. Update this file after each major session or decision.</p>"},{"location":"session_decision_notes/#2024-07-10-initial-platform-voucher-engine-decisions","title":"[2024-07-10] Initial Platform &amp; Voucher Engine Decisions","text":"<ul> <li>Architecture:</li> <li>Node.js/Express backend, MySQL (Google Cloud SQL), modular structure (controllers, models, routes, services, utils)</li> <li>Wallets:</li> <li>Each user has a wallet linked to a unique account number (composed of mobile, ID/passport, and a unique code)</li> <li>Suspense account logic for unallocated deposits (e.g., wrong mobile number)</li> <li>Vouchers:</li> <li>Voucher engine supports partial redemption, brand-locking (merchant/service provider), and configuration</li> <li>Voucher value must be between 5 and 4000 (validated in controller)</li> <li>Voucher table schema aligned with API (see <code>DESCRIBE vouchers;</code> for current columns)</li> <li>Best Practices:</li> <li>All major decisions and requirements are documented in project files</li> <li>API endpoints are tested with curl/Postman and validated for business rules</li> <li>Next Steps:</li> <li>Continue to document all major decisions here for future agents/developers</li> <li>Expand features (VAS, QR, referrals, etc.) as needed</li> </ul> <p>Add new entries below for each session or major decision/change.</p>"}]}